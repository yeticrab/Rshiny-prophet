devtools::install_github("rstats-db/bigrquery")
install.packages('bigrquery')
library("bigrquery")
# Use your project ID here
project <- "travelsupermarket-1236" # put your project ID here
# Example query - select copies of files with content containing "TODO"
sql <- "SELECT SUM(copies)
FROM `bigquery-public-data.github_repos.sample_contents`
WHERE NOT binary AND content LIKE '%TODO%'"
# Execute the query and store the result
todo_copies <- query_exec(sql, project = project, useLegacySql = FALSE)
install.packages('prophet')
library(prophet)
library(rstan)
install.packages('rstan')
library(rstan)
library(prophet)
library('rstan')
instal.packages("Rcpp")
install.packages("Rcpp")
install.packages("Rcpp")
install.packages("rstan")
library('prophet')
library('rstan')
install.packages('rstan')
library('rstan')
install.packages('Rtools')
install.packages('prophet')
library('prophet')
library('Rtools')
install.packages('Rtools')
library(devtools)
library(prophet)
install.packages('prophet')
ap <- available.packages()
ap
'prophet' %in% rownames(ap)
library(prophet)
library('rstan')
library('Rstan')
install.packages('rstan')
library('prophet')
install.packages('prophet')
library('prophet')
?prophet()
history <- data.frame(ds = seq(as.Date('2015-01-01'), as.Date('2016-01-01'), by = 'd'),
y = sin(1:366/200) + rnorm(366)/10)
m <- prophet(history)
m
plot(m)
m
m$stan.fit
future <- make_future_dataframe(m, periods = 1826)
future$cap <- 8.5
fcst <- predict(m, future)
plot(m, fcst);
dir('Downloads')
data = read.csv('c:\\usr\\car_clicks.csv')
data[1,]
data = read.csv('c:\\usr\\car_clicks.csv')
data[1,]
as.Date(as.character(data$Date), format = 'YYYYMMDD')
as.Date(as.character(data$Date), format = '%Y%m%d')
data
data[1,]
m <- prophet(df)
future <- make_future_dataframe(m, periods = 30)
fcst <- predict(m, future)
plot(m, fcst);
prophet_plot_components(m, forecast)
data
data[1,]
data = read.csv('c:\\usr\\car_clicks.csv')
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Total.Events)
m <- prophet(df)
future <- make_future_dataframe(m, periods = 30)
fcst <- predict(m, future)
plot(m, fcst);
prophet_plot_components(m, forecast)
datam <- prophet(data)
future <- make_future_dataframe(m, periods = 30)
fcst <- predict(m, future)
plot(m, fcst);
prophet_plot_components(m, forecast)
m = prophet(data)
future = make_future_dataframe(m, periods = 30)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
plot(m, fcst);
prophet_plot_components(m, fcst)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_clicks.csv')
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Total.Events)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data[1,]
d
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'Organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'Organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'Organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'Organic',]
data
data[1,]
data = read.csv('c:\\usr\\hols_sessions.csv')
data[1,]
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
data
data[1,]
plot(m, fcst);
prophet_plot_components(m, fcst)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data
data = data[data$Medium == 'cpc',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
prophet_plot_components(m, fcst)
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == 'organic',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
data = read.csv('c:\\usr\\hols_sessions.csv')
data
data[,2]
table(data[,2])
data = read.csv('c:\\usr\\hols_sessions.csv')
data = data[data$Medium == '(none)',]
data = data.frame(ds = as.Date(as.character(data$Date), format = '%Y%m%d'), y = data$Sessions)
m = prophet(data)
future = make_future_dataframe(m, periods = 365)
fcst   = predict(m, future)
plot(m, fcst);
library(shiny)
library(leaflet)
library(shinydashboard)
library(shinythemes)
ui = shinyUI(
fluidPage(
theme = shinytheme("superhero"),
navbarPage(title="TravelSupermarket"),
tags$head(tags$link(rel="shortcut icon", href="https://www.travelsupermarket.com/favicon.ico"))
)
)
server <- function(input, output, session){
plot(1:100, col = tsm_cols$orange)
}
# Run the application
shinyApp(ui = ui, server = server)
install.packages('shinyApp')
install.packages('shiny')
library(shiny)
library(leaflet)
library(shinydashboard)
library(shinythemes)
library(prophet)
ui = shinyUI(
fluidPage(
theme = shinytheme("superhero"),
navbarPage(title="TravelSupermarket"),
tags$head(tags$link(rel="shortcut icon", href="https://www.travelsupermarket.com/favicon.ico"))
)
)
server <- function(input, output, session){
plot(1:100, col = tsm_cols$orange)
}
# Run the application
shinyApp(ui = ui, server = server)
library(shiny)
library(leaflet)
library(shinydashboard)
library(shinythemes)
library(prophet)
?install.packages
install.packages(c('leaflet', 'shinydashboard', 'shinytheme'))
install.packages(c('shinythemes'))
library(shiny)
library(leaflet)
library(shinydashboard)
library(shinythemes)
library(prophet)
ui = shinyUI(
fluidPage(
theme = shinytheme("superhero"),
navbarPage(title="TravelSupermarket"),
tags$head(tags$link(rel="shortcut icon", href="https://www.travelsupermarket.com/favicon.ico"))
)
)
server <- function(input, output, session){
plot(1:100, col = tsm_cols$orange)
}
# Run the application
shinyApp(ui = ui, server = server)
?shinyUI
dashboardHeader
runApp()
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
dashboardHeader
?dashboardHeader
dashboardPage
?dashboardPage
?fluidRow
?dashboardBody
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
selectInput()
?selectInput
data[1,]
data = read.csv('c:\\usr\\hols_sessions.csv')
data[1,]
xtabs(data$Sessions ~ data$Medium)
sort(xtabs(data$Sessions ~ data$Medium))
?dateRangeInput()
date()
toda
Sys.Date()
icon
?icon
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
dashboardHeader
?dashboardHeader
runApp('C:\\usr\\prophet')
renderPlot()
?renderPlot
holidays = read.csv('hols_sessions.csv')
"C:\\usr\\prophet\\hols_sessions.csv"
read.csv("C:\\usr\\prophet\\hols_sessions.csv")
holidays = read.csv("C:\\usr\\prophet\\hols_sessions.csv")
holidays
holidays[1,]
holidays$Sessions
holidays$Sessions ~ holidays$Medium
sort(xtabs(holidays$Sessions ~ holidays$Medium))
runApp('C:\\usr\\prophet')
dates
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
renderPlot
?renderPlot
library(ggplot2)
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
library(ggvis)
install.packages('ggvis')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
m
m
?m
?plot
?conditionalPanel
tabPanel()
?tabPanel
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
icon
?icon
runApp('C:\\usr\\prophet')
icoon
actionButton()
actionButton(
actionButton
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
actionButton()
?actionButton()
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
g <- plot(m, fcst)
g+theme_classic()
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
holidays = read.csv("C:\\usr\\prophet\\hols_sessions.csv")
holidays$medium = 'other'
holidays$medium[ holidays$Medium == 'referral'] = 'referral'
holidays$medium[ holidays$Medium == 'email']    = 'email'
holidays$medium[ holidays$Medium == '(none)']   = '(none)'
holidays$medium[ holidays$Medium == 'cpc']      = 'cpc'
holidays$medium[ holidays$Medium == 'organic']  = 'organic'
holidays = data.frame(ds = as.Date(as.character(holidays$Date), format = '%Y%m%d'), medium = holidays$medium, y = holidays$Sessions)
holidays
holidays[1,]
holidays
holidays = read.csv("C:\\usr\\prophet\\hols_sessions.csv")
holidays$Date = as.Date(as.character(holidays$Date), format = '%Y%m%d')
holidays = read.csv('hols_sessions.csv')
holidays$Date = as.Date(as.character(holidays$Date), format = '%Y%m%d')
holidays$medium = 'other'
holidays$medium[ holidays$Medium == 'referral'] = 'referral'
holidays$medium[ holidays$Medium == 'email']    = 'email'
holidays$medium[ holidays$Medium == '(none)']   = '(none)'
holidays$medium[ holidays$Medium == 'cpc']      = 'cpc'
holidays$medium[ holidays$Medium == 'organic']  = 'organic'
holidays =aggregate(holidays$Sessions, list(holidays$Date, holidays$medium))
holidays = aggregate(holidays$Sessions, list(holidays$Date, holidays$medium), sum)
holidays[1,]
holidays
holidays = read.csv("C:\\usr\\prophet\\hols_sessions.csv")
holidays$Date = as.Date(as.character(holidays$Date), format = '%Y%m%d')
holidays$medium = 'other'
holidays$medium[ holidays$Medium == 'referral'] = 'referral'
holidays$medium[ holidays$Medium == 'email']    = 'email'
holidays$medium[ holidays$Medium == '(none)']   = '(none)'
holidays$medium[ holidays$Medium == 'cpc']      = 'cpc'
holidays$medium[ holidays$Medium == 'organic']  = 'organic'
holidays = aggregate(holidays$Sessions, list(holidays$Date, holidays$medium), sum)
holidays
holidays[1,]
runApp('C:\\usr\\prophet')
holidays
holidays[1,]
holidays = data.frame(ds = holidays[, 1], Medium = holidays[, 2] , y = holidays[, 3])
data = holidays
data = subset(data, Medium == medium)
medium = 'organic'
data = subset(data, Medium == medium)
data[1,]
data
m = prophet(data)
future = make_future_dataframe(m, periods = days)
fcst   = predict(m, future)
days = 365
m = prophet(data)
future = make_future_dataframe(m, periods = days)
fcst   = predict(m, future)
g <- plot(m, fcst)
g+theme_classic()
g
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
data
runApp('C:\\usr\\prophet')
library(shiny)
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
runApp('C:\\usr\\prophet')
library(rsconnect)
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='rogergill',
token='CD412E4B806CE993E22780CFEA73F38D',
secret='2oOQE0NmiadfvoFoYoKTu4INGcMCHvCvCnOQturs')
deployApp()
?deployApp
deployApp(appDir = 'C:\\usr\\prophet', appFileManifest = 'manifest.txt')
deployApp(appDir = 'C:\\usr\\prophet', appFileManifest = 'manifest.txt')
dir('C:\\usr\\prophet')
deployApp(appDir = 'C:\\usr\\prophet', appFileManifest =  "manifest.txt" )
deployApp(appDir = 'C:\\usr\\prophet', appFileManifest =  "C:\\usr\\prophet\\manifest.txt" )
table(rbinom(1000000, 10, 0.99)) / 1000000
rbinom(1000000, 10, 0.7)
table(rbinom(1000000, 10, 0.7)0
table(rbinom(1000000, 10, 0.7))
plot(table(rbinom(1000000, 10, 0.7)))
123/725
read.csv('c:\\usr\\book1.csv')
data = readLines('c:\\usr\\book1.csv')
data
data[1]
data[2]
data[3]
data[4]
seq(1, length(data), 3)
data[seq(1, length(data), 3)]
data[seq(1, length(data), 3)]
data = readLines('c:\\usr\\book1.csv')
data = data[seq(1, length(data), 3)]
data = unlist(lapply(strsplit(data, 'Price£'), funciton(x)x[2]))
strsplit(data, 'Price£')
data = unlist(lapply(strsplit(data, 'Price£'), function(x)x[2]))
data[1,]
data[1]
data = unlist(lapply(strsplit(data, '<'), function(x)x[1]))
data
data = as.numeric(data)
data
plot(data)
plot(data, ylab = 'Price, £', xlab = 'Rank of policy', pch = 16, col = 'orange')
box()
grid()
mean(data)
abline(h = mean(data), lwd = 3, col = 'orange', lty = 2)
abline(h = min(data), lwd = 3, col = 'orange')
axis(2, at = mean(data), label = round(mean(data)))
axis(2, at = min(data), label = round(min(data)))
91-26
length(data)
data < mean(data)
sum(data < mean(data))
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
library(shiny)
setwd('C:\\Users\\roger.gill\\Documents\\GitHub\\Rshiny-prophet')
source("helpers/import_delimited_file.r", local = T)
source("helpers/explore_series_data.r", local = T)
runApp()
12/882.28
12.88/2.28
